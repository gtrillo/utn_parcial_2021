#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Salon.h"
#define ESTADO_LIBRE 1
#define ESTADO_OCUPADO 0

/** \brief add in a existing list of employees the values received as parameters
* in the first empty position
* \param list employee*
* \param len int
* \param id int
* \param name[] char
* \param lastName[] char
* \param salary float
* \param sector int
* \return int Return (-1) if Error [Invalid length or NULL pointer or without
free space] - (0) if Ok
*/
int initSalon(Salon* list, int len)
{
	int retorno;
	int i;

	if (list != NULL && len > 0)
	{
		for (i = 0; i < len; i++)
		{
			list[i].flagEmpty = ESTADO_LIBRE;
			retorno = 0;
		}
	}
	else
	{
		retorno = -1;
	}
	return retorno;
}

int addSalon(Salon list [])
{
	int retorno;
	int sectorAux;
	float salaryAux;
	char nombre [LEN_LIST];
	char direccion [LEN_LIST];

	if (list != NULL)
	{
		if (utn_getText(nameAux, 51, "Ingrese nombre del salon:\n", "Error de tipeo, Intente nuevamente:\n", 5)==0)
		{
			if (utn_getText(direccion, 51, "Ingrese Apellido:\n", "Error de tipeo, Intente nuevamente:\n", 5)==0)
				{
					if (utn_getNumeroFloat(&salaryAux, "Ingrese salario:\n", "Error de tipeo, El salario solo puede contener numeros", 1, 1000000000, 5)==0)
					{
						if (utn_getNumeroInt(&sectorAux, "Seleccione sector:\n", "sector invalido.", 1, 10, 5)==0)
						{
							strncpy(list->name, nameAux, sizeof (list->name));
							strncpy(list->lastName, lastNameAux, sizeof (list->lastName));
							list->salary = salaryAux;
							list->sector = sectorAux;
							list->id = DameUnIdNuevo();
							list ->flagEmpty = ESTADO_OCUPADO;
							retorno = 0;
						}
					}
				}
		}
	}
	return retorno;
}
