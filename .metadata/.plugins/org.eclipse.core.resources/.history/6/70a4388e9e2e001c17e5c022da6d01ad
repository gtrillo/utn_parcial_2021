#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Salon.h"
#define ESTADO_LIBRE 1
#define ESTADO_OCUPADO 0
static int DameUnIdNuevo(void);
/** \brief add in a existing list of employees the values received as parameters
* in the first empty position
* \param list employee*
* \param len int
* \param id int
* \param name[] char
* \param lastName[] char
* \param salary float
* \param sector int
* \return int Return (-1) if Error [Invalid length or NULL pointer or without
free space] - (0) if Ok
*/
int initSalon(Salon* list, int len)
{
	int retorno;
	int i;

	if (list != NULL && len > 0)
	{
		for (i = 0; i < len; i++)
		{
			list[i].flagEmpty = ESTADO_LIBRE;
			retorno = 0;
		}
	}
	else
	{
		retorno = -1;
	}
	return retorno;
}

int addSalon(Salon list [])
{
	char nombre [LEN_LIST];
	char direccion [LEN_LIST];
	int tipo;
	int retorno;

	if (list != NULL)
	{
		if (utn_getText(nombre, 51, "Ingrese nombre del salon:\n", "Error de tipeo, Intente nuevamente:\n", 5)==0)
		{
			if (utn_getTextAlfanumerico(&direccion, 51, "Ingrese direccion:\n", "Error de tipeo, Intente nuevamente:\n", 5)==0)
				{
					if (utn_getNumeroFloat(&tipo, "Ingrese tipo de salon [1 SHOPPING - 2 LOCAL]:\n", "Error de tipeo, se debe ingresar [1 SHOPPING - 2 LOCAL]", 1, 2, 5)==0)
					{
							strncpy(list->nombre, nombre, sizeof (list->nombre));
							strncpy(list->direccion, direccion, sizeof (list->direccion));
							list->tipo = tipo;
							list->id = DameUnIdNuevo();
							list ->flagEmpty = ESTADO_OCUPADO;
							retorno = 0;
					}
				}
		}
	}
	return retorno;
}

static int DameUnIdNuevo(void)
{
	static int contador = 0;

	return contador++;
}

/**
 *\brief funsion que devuelve un lugar libre en el array
 *\param lista employe
 *\param largo de la lista
 *\param retorno de posicion libre
 *\return retorna 0 en el caso de que este todo bien y -1 en caso de error
 */
int DameUnLugarLibre (Salon list[], int len, int* retornoPosicionLibre)
{
	int retorno;
	int indice;
	int auxLugarLibre;
	if (list != NULL)
	{
		for (indice = 0; indice < len; indice++)
		{
			if (list[indice].flagEmpty == 1)
			{
				auxLugarLibre = indice;
				retorno = 0;
				break;
			}
		}
	}
	*retornoPosicionLibre = auxLugarLibre;
	return retorno;
}
