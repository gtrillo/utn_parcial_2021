#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include "Salon.h"
#include "Arcade.h"
#include "utn_pedirCadena.h"
#define ESTADO_LIBRE 1
#define ESTADO_OCUPADO 0
#define TIPO_MONO 1
#define TIPO_ESTEREO 2
static int arcade_dameUnIdNuevo(void);

int arcade_initArcade(Arcade* list, int len)
{
	int retorno;
	int i;

	if (list != NULL && len > 0)
	{
		for (i = 0; i < len; i++)
		{
			list[i].flagEmpty = ESTADO_LIBRE;
			retorno = 0;
		}
	}
	else
	{
		retorno = -1;
	}
	return retorno;
}
int arcade_addArcade(Arcade listArcades[], Salon listSalones[])
{
	char nacionalidadAux [LEN_LIST];
	int tipoSonidoAux;
	int cantidadJugadoresAux;
	int capacidadFichasAux;
	int idIngresado;
	char NombreDelJuegoAux [LEN_NOMBREJUEGO];
	int retorno;

	if (listArcades != NULL && listSalones != NULL)
	{
		if (utn_getText(nacionalidadAux, LEN_LIST, "Ingrese nacionalidad del arcade:\n", "Error de tipeo, Intente nuevamente:\n", 5)==0)
			{
			if (utn_getNumeroInt(&tipoSonidoAux, "Ingrese tipo de sonido [1 MONO - 2 ESTÉREO]:\n", "Error de tipeo, Intente nuevamente:\n",1,2,5)==0)
				{
					if (utn_getNumeroInt(&cantidadJugadoresAux, "Ingrese cantidad de jugadores:\n", "Error de tipeo, se debe ingresar [1 MONO - 2 ESTÉREO]", 1, 2, 5)==0)
					{
						if (utn_getNumeroInt(&capacidadFichasAux, "Ingrese capacidad maxima de fichas:\n", "Error de tipeo, Intente nuevamente:\n", 1, 100000, 5)==0)
						{
							if (utn_getNumeroInt(&idIngresado, "Ingrese el ID del salón al que pertenece:\n", "Error de tipeo, Intente nuevamente:\n", 0, 1000, 5)==0)
							{
								strncpy(listArcades->nacionalidad, nacionalidadAux, sizeof (listArcades->nacionalidad));
								listArcades->tipoSonido = tipoSonidoAux;
								listArcades->cantidadJugadores = cantidadJugadoresAux;
								listArcades->id = arcade_dameUnIdNuevo();
								listArcades ->flagEmpty = ESTADO_OCUPADO;
								retorno = 0;
							}
						}
					}
				}
			}
	}
	return retorno;
}
static int arcade_dameUnIdNuevo(void)
{
	static int contador = 0;
	return contador++;
}
/**
 *\brief funsion que devuelve un lugar libre en el array
 *\param lista employe
 *\param largo de la lista
 *\param retorno de posicion libre
 *\return retorna 0 en el caso de que este todo bien y -1 en caso de error
 */
int arcade_dameUnLugarLibre (Arcade pEmpleado[], int lenArray, int* retornoPosicionLibre)
{
	int retorno;
	int indice;
	int auxLugarLibre;
	if (pEmpleado != NULL)
	{
		for (indice = 0; indice < lenArray; indice++)
		{
			if (pEmpleado[indice].flagEmpty == 1)
			{
				auxLugarLibre = indice;
				retorno = 0;
				break;
			}
		}
	}
	*retornoPosicionLibre = auxLugarLibre;
	return retorno;
}
/** \brief find an Employee by Id en returns the index position in array.
*
* \param list Employee*
* \param len int
* \param id int
* \return Return employee index position or (-1) if [Invalid length or NULL
pointer received or employee not found]
*
*/
